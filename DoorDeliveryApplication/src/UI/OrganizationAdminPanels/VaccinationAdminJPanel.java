/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.OrganizationAdminPanels;

import Business.Customer.Customer;
import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Orders.Order;
import Business.Orders.OrderItem;
import Business.Organization.Organization;
import Business.Products.Product;
import Business.UserAccount.UserAccount;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nidhi Raghavendra
 */
public class VaccinationAdminJPanel extends javax.swing.JPanel {

    /**
     * Creates new form VaccinationAdminJPanel
     */
    private final Ecosystem ecosystem;
    private final Network network;
    private final UserAccount user;
    private final Organization organization;
    private Order currentOrder;
    private Customer currentCustomer;
    DefaultTableModel tableModel;
    private File chosenFile;
    private Integer orderid;
    DefaultTableModel orderTableModel;
    DefaultTableModel itemTableModel;

    public VaccinationAdminJPanel(JPanel userprocessContainer, Ecosystem system, UserAccount ua, Network network, Organization organization, Enterprise enterprise) {
        initComponents();

        this.ecosystem = system;
        this.network = network;
        this.user = ua;
        this.organization = organization;

        this.tableModel = (DefaultTableModel) prodTable.getModel();
        this.orderTableModel = (DefaultTableModel) ordeTable.getModel();
        this.itemTableModel = (DefaultTableModel) prodTable1.getModel();
        System.out.println("ORGNAME --------- " + this.organization.getName() + this.organization.getOrganizationProducts().size());
        populateProducts();
        populateOrders();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ordeTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        prodTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        prodTable = new javax.swing.JTable();
        addBt = new javax.swing.JButton();
        fieldProductName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        fieldProductPrice = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fieldStock = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(253, 252, 249));
        setPreferredSize(new java.awt.Dimension(1500, 1000));

        jTabbedPane1.setBackground(new java.awt.Color(253, 252, 249));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(1500, 1000));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1500, 1000));

        jPanel1.setBackground(new java.awt.Color(253, 252, 249));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ordeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ORDER ID", "CUSTOMER NAME", "ORDER PRICE", "ORDER STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ordeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordeTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ordeTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, -1, 276));

        prodTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ITEM ID", "ITEM NAME", "ITEM PRICE", "ITEM QTY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(prodTable1);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 120, -1, 280));

        jButton2.setBackground(new java.awt.Color(0, 102, 102));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("ACCEPT ORDER");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 460, -1, -1));

        jButton3.setBackground(new java.awt.Color(255, 153, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("REJECT ORDER");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 460, -1, -1));

        jTabbedPane1.addTab("MANAGE ORDERS", jPanel1);

        jPanel2.setBackground(new java.awt.Color(253, 252, 249));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        prodTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PRODUCT ID", "PRODUCT NAME", "PRODUCT PRICE", "PRODUCT STOCK"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(prodTable);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 310, 519, 241));

        addBt.setBackground(new java.awt.Color(0, 102, 102));
        addBt.setForeground(new java.awt.Color(255, 255, 255));
        addBt.setText("ADD PRODUCTS");
        addBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtActionPerformed(evt);
            }
        });
        jPanel2.add(addBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 570, -1, -1));
        jPanel2.add(fieldProductName, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 110, 263, -1));

        jLabel1.setText("PRODUCT NAME");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 80, -1, -1));
        jPanel2.add(fieldProductPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 170, 263, -1));

        jLabel2.setText("PRODUCT PRICE");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 140, -1, -1));
        jPanel2.add(fieldStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 230, 263, -1));

        jLabel3.setText("STOCK");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 200, -1, -1));

        jButton1.setBackground(new java.awt.Color(0, 102, 102));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("UPDATE PRODUCTS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 570, -1, -1));

        jTabbedPane1.addTab("MANAGE PRODUCTS", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 2007, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1065, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtActionPerformed
        // TODO add your handling code here:
        try {
            if (fieldProductName.getText().trim().length() > 0 && Double.valueOf(fieldProductPrice.getText()) > 0.0 && Integer.valueOf(fieldStock.getText()) > 0) {
                if (this.organization.getOrganizationProducts().size() > 0) {
                    for (Product p : this.organization.getOrganizationProducts()) {
                        if (p.getName().equals(fieldProductName.getText())) {
                            JOptionPane.showMessageDialog(null, "Product already exists");
                            break;
                        } else {
                            Product prod = new Product();
                            prod.setName(fieldProductName.getText());
                            prod.setPrice(Double.valueOf(fieldProductPrice.getText()));
                            prod.setStockunits(Integer.valueOf(fieldStock.getText()));
                            if (this.chosenFile != null) {
                                prod.setProductImage(chosenFile);
                            }
                            this.organization.getOrganizationProducts().add(prod);
                            JOptionPane.showMessageDialog(null, "Added !");
                            break;
                        }
                    }
                } else {
                    Product prod = new Product();
                    prod.setName(fieldProductName.getText());
                    prod.setPrice(Double.valueOf(fieldProductPrice.getText()));
                    prod.setStockunits(Integer.valueOf(fieldStock.getText()));
                    if (this.chosenFile != null) {
                        prod.setProductImage(chosenFile);
                    }
                    this.organization.addProduct(fieldProductName.getText(), Double.valueOf(fieldProductPrice.getText()), Integer.valueOf(fieldStock.getText()));
                    JOptionPane.showMessageDialog(null, "Added !");
                }
            }
            populateProducts();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid data fields");
        }
    }//GEN-LAST:event_addBtActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int count = this.tableModel.getRowCount();
        try {
            for (int i = 0; i < count; i++) {
                for (Product p : this.organization.getOrganizationProducts()) {
                    if (p.getProductId() == Integer.valueOf((int) this.tableModel.getValueAt(i, 0))) {

                        System.out.println((int) this.tableModel.getValueAt(i, 3));
                        int idx = this.organization.getOrganizationProducts().indexOf(p);
                        p.setStockunits((int) this.tableModel.getValueAt(i, 3));
                        p.setPrice(Double.valueOf((Double) this.tableModel.getValueAt(i, 2)));
                        this.organization.getOrganizationProducts().set(idx, p);

                    }
                }

            }
            JOptionPane.showMessageDialog(null, "Updated the product!");
            populateProducts();
        } catch (Exception e) {
            System.out.println(e + " ------------- ");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ordeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordeTableMouseClicked
        // TODO add your handling code here:

        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        int column = source.columnAtPoint(evt.getPoint());

        this.orderid = Integer.valueOf((Integer) source.getModel().getValueAt(row, column));
        fetchOrderObject();
        populateItems();
        populateOrders();
    }//GEN-LAST:event_ordeTableMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {

            this.currentOrder.setStatus("ACCEPTED");
            populateOrders();
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {

            this.currentOrder.setStatus("REJECTED");
            populateOrders();
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBt;
    private javax.swing.JTextField fieldProductName;
    private javax.swing.JTextField fieldProductPrice;
    private javax.swing.JTextField fieldStock;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable ordeTable;
    private javax.swing.JTable prodTable;
    private javax.swing.JTable prodTable1;
    // End of variables declaration//GEN-END:variables

    private void populateProducts() {
        tableModel.setRowCount(0);
        for (Product p : this.organization.getOrganizationProducts()) {

            tableModel.insertRow(tableModel.getRowCount(), new Object[]{
                p.getProductId(),
                p.getName(),
                p.getPrice(),
                p.getStockunits(),
                1
            });

        }
    }

    private void populateOrders() {
        try {
            this.orderTableModel.setRowCount(0);

            for (Customer customer : this.network.getCustomerDirectory().getCustomerList()) {
                ArrayList<Order> customerorder = customer.getOrderlist();

                for (Order o : customerorder) {
                    if (o.getOrganizationname().equals(this.organization.getName())) {
//                        populate orders table
                        this.orderTableModel.insertRow(orderTableModel.getRowCount(), new Object[]{
                            o.getOrderId(),
                            customer.getUsername(),
                            o.getPrice(),
                            o.getStatus()
                        });

                    }
                }
            }

        } catch (Exception e) {
            System.out.println("IN SUPERMARKET Admin POPULATE ORDER ------ " + e);
        }
    }

    private void populateItems() {
        this.itemTableModel.setRowCount(0);
        try {
            for (OrderItem oi : this.currentOrder.getItemsOrdered()) {
                this.itemTableModel.insertRow(this.itemTableModel.getRowCount(), new Object[]{
                    oi.getProductId(),
                    oi.getProductName(),
                    oi.getProductPrice(),
                    oi.getQty()
                });
            }
        } catch (Exception e) {
            System.out.println("IN ITEMS TABLE OF EQUIPMENT ---- " + e);
        }
    }

    private void fetchOrderObject() {
        for (Customer customer : this.network.getCustomerDirectory().getCustomerList()) {
            for (Order o : customer.getOrderlist()) {
                if (o.getOrderId() == this.orderid) {
                    this.currentOrder = o;
                    this.currentCustomer = customer;
                }
            }
        }
    }

}
