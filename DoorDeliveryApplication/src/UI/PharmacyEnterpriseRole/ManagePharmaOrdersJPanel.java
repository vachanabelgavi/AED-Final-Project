
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.PharmacyEnterpriseRole;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.DeliveryAgent.DeliveryAgent;
import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import javax.swing.JPanel;
import Business.Network.Network;
import Business.Orders.Order;
import Business.Orders.OrderItem;
import Business.Organization.Organization;
import Business.Products.Product;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.PasswordAuthentication;
import javax.mail.internet.MimeMessage;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
//import javax.activation.*;
import javax.mail.Address;

/**
 *
 * @author pannaga
 */
public class ManagePharmaOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePharmaOrdersJPanel
     */

    private JPanel userProcessContainer;
    private Ecosystem business;
    private CustomerDirectory customerDirectory;
    UserAccount ua;
    DeliveryAgent dlvrymn;
    Enterprise enterprise;
    DefaultTableModel dtm;
    //ArrayList<DeliveryAgent> d;
    UserAccountDirectory userdir;
    Customer customer;
    private OrderItem itemsdir;
    private Order order;
    private ArrayList<Order> orderplaced = new ArrayList<Order>();
    Organization organization;
    Network network;
    ArrayList<DeliveryAgent> del;
    ArrayList<Integer> z;


    public ManagePharmaOrdersJPanel(JPanel userProcessContainer, Ecosystem business,Network network,UserAccountDirectory userdir, Enterprise enterprise, Customer customer, Organization organization, UserAccount ua) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.userdir = userdir;
        this.enterprise = enterprise;
        this.customer = customer;
        this.network = network;
        this.organization = organization;
         this.ua = ua;
         this.dlvrymn = new DeliveryAgent();

         
        System.out.println("CAME INTO PHARMA ORDER PANEL");
        dtm = (DefaultTableModel) pharmaOrderTable.getModel();

//        if (order.getItemsOrdered() != null){
//
//            }
//            else{
////                this.itemsdir = new ItemsDirectory();
////                enterprise.setItemsDirectory(itemsdir);
//            }


       // displaycombobox();
        //populateTable();
       
        populateDp();
        
    }

    
    
    public void populateDp() {
      //  dtm.setRowCount(0);
       // int selectrow = pharmaOrderTable.getSelectedRow();
         ArrayList<Customer> customerdir = this.network.getCustomerDirectory().getCustomerList();
         System.out.println("Inside combo box");
            
            for(Customer cust: customerdir){
                    for (Order o : cust.getOrderlist()) {
                //  Order o : this.customer.getOrderlist()//              populate items
                if("ACCEPTED".equals(o.getStatus())){
                orderscmb.addItem(String.valueOf(o.getOrderId()));
            }
        }

    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pharmaOrderTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        deliverycmb = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        assignbtn = new javax.swing.JButton();
        btnshoworders = new javax.swing.JButton();
        orderscmb = new javax.swing.JComboBox<>();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pharmaOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Product Name", "Name", "Zipcode", "Price", "Delivery agent"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(pharmaOrderTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 803, 186));

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 54, -1, -1));

        deliverycmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliverycmbActionPerformed(evt);
            }
        });
        add(deliverycmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 390, 148, -1));

        jLabel1.setText("Assign Delivery agent");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 390, -1, -1));

        assignbtn.setText("Assign");
        assignbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignbtnActionPerformed(evt);
            }
        });
        add(assignbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 430, 105, -1));

        btnshoworders.setText("Show Orders");
        btnshoworders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowordersActionPerformed(evt);
            }
        });
        add(btnshoworders, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 100, 130, -1));

        orderscmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderscmbActionPerformed(evt);
            }
        });
        add(orderscmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, 110, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void deliverycmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliverycmbActionPerformed
        // TODO add your handling code here:



    }//GEN-LAST:event_deliverycmbActionPerformed

    private void assignbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignbtnActionPerformed
        // TODO add your handling code here:
        String agent = deliverycmb.getSelectedItem().toString();
        
        boolean emailsend = true;
        System.out.println("Inside assign button");
       // dtm.setRowCount(0);
        int selectrow = pharmaOrderTable.getSelectedRow();
         ArrayList<Customer> customerdir = this.network.getCustomerDirectory().getCustomerList();
        String recipients = null;
        
       
             System.out.println("Inside table after assigning");
            
            for(Customer cust: customerdir){
                    for (Order o : cust.getOrderlist()) {
                    ArrayList<OrderItem> oi = o.getItemsOrdered();
                    ArrayList<String> pr = new ArrayList<>();
                //  Order o : this.customer.getOrderlist()//              populate items
                for (int i = 0; i < oi.size(); i++) {
                    
                    pr.add(oi.get(i).getProductName());
                }
                
                if("ACCEPTED".equals(o.getStatus()) && orderscmb.getSelectedItem().toString().equals(String.valueOf(o.getOrderId()))){
                     System.out.println(" "+agent);
                     o.setDeliveryAgent(dlvrymn);
                    dlvrymn.setUseraccount(ua);
                    ua.setUsername(agent); 
                    dlvrymn.setActive(false);
                    deliverycmb.setSelectedItem(" ");    
                    populateTable();
                   
                    ArrayList<String> agentslist = new ArrayList<>();
                    agentslist.add(agent);
                    ArrayList<DeliveryAgent> del = enterprise.getDeliveryAgentsInEnterpiselist();
                    System.out.println(o.getDeliveryAgent().getUseraccount().getUsername());
                
//                 
//                if(o.getDeliveryAgent().getUseraccount().getUsername() == agent){
//                    //o.getDeliveryAgent().getUseraccount().getUsername()
//                    //d.getUseraccount().getUsername() == dlvrymn.getUseraccount().getUsername() && d.getUseraccount().getEmployee().getName() == o.getDeliveryAgent().getUseraccount().getEmployee().getName()
//                     System.out.println(" "+agent);
//                   
//                 
//                   emailsend = true;
//                   
//                   break;
//                   
//                }else{
//                    emailsend = false;
//                    JOptionPane.showMessageDialog(null, "Delivery agent not available for now");
////                 o.setDeliveryAgent(dlvrymn);
////                dlvrymn.setUseraccount(ua);
////                ua.setUsername(agent); 
//                
//                      
// }

        
        
        if(emailsend = true){
        
        JOptionPane.showMessageDialog(null, "Delivery agent assigned successful");   
        int dialogueb = JOptionPane.INFORMATION_MESSAGE;
        System.out.println(""+dialogueb);
        int dialoguer = JOptionPane.showConfirmDialog(this, "SENDING EMAIL\n"
                + "If yes please wait","DELIVERY AGENT ASSIGNMENT", dialogueb);
        if(dialoguer == 0){      
         recipients = cust.getEmail();
         System.out.println("Entering assign for email ==========");
         String subjects = "Delivery";
         String messaget = "Delivered agent assigned successfully";
        
        
        System.out.println("Start");
        final String username = "pannagaveeramohan@gmail.com";
        final String password = "9686300037";

        Properties p = new Properties();
        p.put("mail.smtp.auth", "true");
        p.put("mail.smtp.host", "smtp.gmail.com");
        p.put("mail.smtp.port", "465");
        p.put("mail.transport.protocol", "smtp");
        p.put("mail.smtp.starttls.enable", "true");
        p.put("mail.smtp.starttls.enable", "true");
        p.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");

         Session session = Session.getInstance(p,
                  new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, password);
                    }
                  });


        try {
           
            Transport transport=session.getTransport();
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress("pannagaveeramohan@gmail.com"));//formBean.getString("fromEmail")
            
            final Address[] recipientAddresses = InternetAddress.parse(recipients);
            message.setRecipients(Message.RecipientType.TO,recipientAddresses);
            message.setSubject(subjects);//formBean.getString(
            message.setText(messaget);
            transport.connect();
            transport.send(message, recipientAddresses);//(message);

            System.out.println("Done");

        } catch (MessagingException e) {
            System.out.println("e="+e);
            e.printStackTrace();
            throw new RuntimeException(e);

        }
    
    JOptionPane.showMessageDialog(null, "Email sent to customer successful");              
  }else{
         JOptionPane.showMessageDialog(null, "Email sending cancelled");   
        }
        
    }
    }
    }
    }  
    }//GEN-LAST:event_assignbtnActionPerformed

    private void orderscmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderscmbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderscmbActionPerformed

    private void btnshowordersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowordersActionPerformed
        // TODO add your handling code here:
        
        ArrayList<Customer> customerdir = this.network.getCustomerDirectory().getCustomerList();
         System.out.println("Inside table");
          deliverycmb.setSelectedItem(0);  
            for(Customer cust: customerdir){
                    for (Order o : cust.getOrderlist()) {
                        if(orderscmb.getSelectedItem().toString().equals(String.valueOf(o.getOrderId()))){
                            deliverycmb.removeAllItems();
                            populateTable();        
                        }
                    }
            }
        
    }//GEN-LAST:event_btnshowordersActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignbtn;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnshoworders;
    private javax.swing.JComboBox<String> deliverycmb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> orderscmb;
    private javax.swing.JTable pharmaOrderTable;
    // End of variables declaration//GEN-END:variables

    private void displaycombobox() {
        
//      d = enterprise.getDeliveryAgentsInEnterpiselist();
//        for(DeliveryAgent dd : d ){
//            deliverycmb.addItem(dd.getUseraccount().getEmployee().getName());

        

    }

    @SuppressWarnings("empty-statement")
    private void populateTable() {
        System.out.println("Inside populate Table");
        dtm.setRowCount(0);
         ArrayList<Customer> customerdir = this.network.getCustomerDirectory().getCustomerList();
          del = this.enterprise.getDeliveryAgentsInEnterpiselist();
         ArrayList<OrderItem> cartOrder = this.customer.getCustomerCart().getCartItems();
//         ArrayList<Product> products = this.organization.getOrganizationProducts();
             System.out.println("Inside table");
                this.z = new ArrayList<>();
            
                for(Customer cust: customerdir){
                    for (Order o : cust.getOrderlist()) {
                    ArrayList<OrderItem> oi = o.getItemsOrdered();
                    ArrayList<String> p = new ArrayList<>();
                //  Order o : this.customer.getOrderlist()//              populate items
                //&& orderscmb.getSelectedItem().equals(o.getOrderId())
                for (int i = 0; i < oi.size(); i++) {
                    
                    p.add(oi.get(i).getProductName());
                }
                if("ACCEPTED".equals(o.getStatus()) && orderscmb.getSelectedItem().toString().equals(String.valueOf(o.getOrderId()))){
                
                dtm.insertRow(dtm.getRowCount(), new Object[]{
                     o.getOrderId(),
                     Arrays.toString(p.toArray()),
                    cust.getName(),
                    cust.getZipcode(),
                    o.getPrice(),
                    o.getDeliveryAgent().getUseraccount().getUsername()
                });
                
             for(DeliveryAgent dd : del ){
         //   for(int j =0; j < dd.getZipcodes().get(j); j++ )
           // z.add(dd.getZipcodes().get(j));
              z = dd.getZipcodes();
              for(int j =0; j< dd.getZipcodes().size(); j++){
              if(cust.getZipcode() == z.get(j) && orderscmb.getSelectedItem().toString().equals(String.valueOf(o.getOrderId())) && dd.getActive() == true){
                 deliverycmb.addItem(dd.getUseraccount().getUsername());
                }
                }
                }//closing delivery agent assignment
               }
               }//closing if statement
            }
                
               System.out.println("Done with populate table");
   } 
    
}

